---
import { getLangFromUrl, useTranslations } from '@/i18n/utils';
import LanguagePicker from './LanguagePicker.astro';
import { Image } from 'astro:assets';

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);

const langPrefix = lang === 'en' ? '/en' : '';

const navItems = [
  {
    title: t('nav.about'),
    label: 'sobre-mi',
    url: `${langPrefix}/sobre-mi`,
    isSection: true,
  },
  {
    title: t('nav.experience'),
    label: 'experiencia',
    url: `${langPrefix}/experiencia`,
    isSection: true,
  },
  {
    title: t('nav.projects'),
    label: 'proyectos',
    url: `${langPrefix}/proyectos`,
    isSection: true,
  },
  {
    title: t('nav.contact'),
    label: 'contacto',
    url: `${langPrefix}/contacto`,
    isSection: true,
  },
  {
    title: t('nav.cv'),
    label: 'cv',
    url: lang === 'en' ? '/en/cv' : '/cv',
    isSection: false,
  },
];
---

<header class="fixed top-0 z-50 flex items-center justify-between w-full px-4 md:px-8 py-4">
  <a href={langPrefix || '/'} aria-label="Home" class="flex items-center z-50">
    <Image
      src="/logo.svg"
      alt="Logo"
      width={48}
      height={48}
      loading="eager"
      class="w-10 h-10 md:w-12 md:h-12 hover:scale-110 transition-transform"
    />
  </a>

  <!-- Desktop Navigation -->
  <nav
    id="desktop-nav"
    class="hidden md:flex px-4 py-2 text-sm font-medium rounded-full bg-gray-900/80 backdrop-blur-md shadow-lg border border-gray-800 justify-center items-center gap-2"
  >
    {
      navItems.map((link) => (
        <a
          class="relative px-3 py-2 transition-colors hover:text-primary-green-vivid rounded-lg nav-link"
          aria-label={link.label}
          href={link.url}
          data-section={link.isSection ? link.label : ''}
        >
          {link.title}
        </a>
      ))
    }
    <div class="h-6 w-px bg-gray-700 mx-2"></div>
    <LanguagePicker />
  </nav>

  <!-- Mobile Menu Button -->
  <button
    id="mobile-menu-btn"
    class="md:hidden relative z-50 w-10 h-10 flex flex-col items-center justify-center gap-1.5"
    aria-label="Toggle menu"
  >
    <span class="menu-line w-6 h-0.5 bg-white transition-all"></span>
    <span class="menu-line w-6 h-0.5 bg-white transition-all"></span>
    <span class="menu-line w-6 h-0.5 bg-white transition-all"></span>
  </button>

  <!-- Mobile Navigation -->
  <nav
    id="mobile-nav"
    class="fixed inset-0 bg-primary-black/95 backdrop-blur-md z-40 flex flex-col items-center justify-center gap-8 opacity-0 pointer-events-none transition-opacity duration-300 md:hidden"
  >
    {
      navItems.map((link) => (
        <a
          class="mobile-nav-link text-2xl font-medium text-white hover:text-primary-green-vivid transition-colors nav-link"
          href={link.url}
          data-section={link.isSection ? link.label : ''}
        >
          {link.title}
        </a>
      ))
    }
    <div class="mt-4">
      <LanguagePicker />
    </div>
  </nav>
</header>

<script>
  document.addEventListener('astro:page-load', () => {
    const mobileMenuBtn = document.getElementById('mobile-menu-btn');
    const mobileNav = document.getElementById('mobile-nav');
    const mobileNavLinks = document.querySelectorAll('.mobile-nav-link');
    const menuLines = document.querySelectorAll('.menu-line');

    let isOpen = false;

    // Toggle mobile menu
    mobileMenuBtn?.addEventListener('click', () => {
      isOpen = !isOpen;

      if (isOpen) {
        mobileNav?.classList.remove('opacity-0', 'pointer-events-none');
        menuLines[0]?.classList.add('rotate-45', 'translate-y-2');
        menuLines[1]?.classList.add('opacity-0');
        menuLines[2]?.classList.add('-rotate-45', '-translate-y-2');
      } else {
        mobileNav?.classList.add('opacity-0', 'pointer-events-none');
        menuLines[0]?.classList.remove('rotate-45', 'translate-y-2');
        menuLines[1]?.classList.remove('opacity-0');
        menuLines[2]?.classList.remove('-rotate-45', '-translate-y-2');
      }
    });

    // Close menu when clicking a link
    mobileNavLinks.forEach((link) => {
      link.addEventListener('click', () => {
        isOpen = false;
        mobileNav?.classList.add('opacity-0', 'pointer-events-none');
        menuLines[0]?.classList.remove('rotate-45', 'translate-y-2');
        menuLines[1]?.classList.remove('opacity-0');
        menuLines[2]?.classList.remove('-rotate-45', '-translate-y-2');
      });
    });

    // Handle navigation with clean URLs (no hash)
    const navLinks = document.querySelectorAll('.nav-link');
    const isOnCvPage = window.location.pathname.includes('/cv');

    navLinks.forEach((link) => {
      link.addEventListener('click', (e) => {
        const sectionId = (link as HTMLElement).getAttribute('data-section');

        if (sectionId) {
          const section = document.getElementById(sectionId);

          // If we're on CV page, modify the link to go to home page and store section in sessionStorage
          if (isOnCvPage) {
            e.preventDefault();
            sessionStorage.setItem('scrollToSection', sectionId);
            const langPrefix = window.location.pathname.includes('/en') ? '/en' : '';
            window.location.href = langPrefix || '/';
            return;
          }

          // If section doesn't exist on current page, navigate to home
          if (!section) {
            e.preventDefault();
            sessionStorage.setItem('scrollToSection', sectionId);
            const langPrefix = window.location.pathname.includes('/en') ? '/en' : '';
            window.location.href = langPrefix || '/';
            return;
          }

          // We're on main page and section exists, prevent default and scroll
          e.preventDefault();

          // Update URL without hash
          const url = (link as HTMLAnchorElement).href;
          window.history.pushState({}, '', url);

          // Smooth scroll to section
          section.scrollIntoView({ behavior: 'smooth', block: 'start' });
        }
      });
    });

    // Check if we need to scroll to a section from sessionStorage
    const scrollToSection = sessionStorage.getItem('scrollToSection');
    if (scrollToSection) {
      sessionStorage.removeItem('scrollToSection');
      const section = document.getElementById(scrollToSection);
      if (section) {
        setTimeout(() => {
          section.scrollIntoView({ behavior: 'smooth', block: 'start' });
          // Update URL
          const langPrefix = window.location.pathname.includes('/en') ? '/en' : '';
          const newUrl = `${langPrefix}/${scrollToSection}`;
          window.history.pushState({}, '', newUrl);
        }, 100);
      }
    }

    // Handle direct URL navigation (e.g., /experiencia)
    const handleDirectNavigation = () => {
      const path = window.location.pathname;
      const pathSegments = path.split('/').filter(Boolean);
      const lastSegment = pathSegments[pathSegments.length - 1];

      // Map of URL segments to section IDs
      const sectionMap: Record<string, string> = {
        'sobre-mi': 'sobre-mi',
        experiencia: 'experiencia',
        proyectos: 'proyectos',
        contacto: 'contacto',
      };

      if (sectionMap[lastSegment]) {
        const section = document.getElementById(sectionMap[lastSegment]);
        if (section) {
          // Small delay to ensure page is fully loaded
          setTimeout(() => {
            section.scrollIntoView({ behavior: 'smooth', block: 'start' });
          }, 100);
        }
      }
    };

    // Run on page load only if we're on the main page (not CV page)
    if (!window.location.pathname.includes('/cv') && !scrollToSection) {
      handleDirectNavigation();
    }

    // Desktop navigation intersection observer
    const sections = document.querySelectorAll('section');
    const navItems = document.querySelectorAll('#desktop-nav a');

    const callback = (entries: any[]) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          navItems.forEach((item) => {
            if (item.getAttribute('aria-label') == entry.target.id) {
              item.classList.add('text-primary-green-vivid');
              item.classList.add('bg-gray-800');

              // Update URL when scrolling through sections (only on main page, not on CV page)
              if (!window.location.pathname.includes('/cv')) {
                const langPrefix = window.location.pathname.includes('/en') ? '/en' : '';
                const newUrl = `${langPrefix}/${entry.target.id}`;
                window.history.replaceState({}, '', newUrl);
              }
            } else {
              item.classList.remove('text-primary-green-vivid');
              item.classList.remove('bg-gray-800');
            }
          });
        }
      });
    };

    const observer = new IntersectionObserver(callback, {
      root: null,
      rootMargin: '0px',
      threshold: 0.3,
    });

    sections.forEach((section) => {
      observer.observe(section);
    });

    document.onvisibilitychange = () => {
      if (document.visibilityState === 'hidden') {
        observer.disconnect();
      } else {
        sections.forEach((section) => {
          observer.observe(section);
        });
      }
    };
  });
</script>

<style>
  header {
    animation: header-appear 0.5s ease-out;
  }

  @keyframes header-appear {
    from {
      opacity: 0;
      transform: translateY(-20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
</style>
